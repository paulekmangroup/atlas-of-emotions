#actions {
	position: absolute;
	width: 100%;
	height: 100%;
	min-height: 600px;
	.small-screen & {
		min-height: 0px;
	}

	top: 0;
	left: 50%;
	margin-left: -50%;

	text-align: center;
	pointer-events: none;

	transition-property: top, transform;
	transition-duration: #{$states-backgrounded-duration-in}s;
	transition-timing-function: cubic-bezier(.81,.34,.63,.85);

	&.backgrounded {
		transform: translateY(#{$actions-margins-bottom}px) scale($actions-backgrounded-scale);

		.small-screen & {
			transform: scale($actions-backgrounded-scale-small);
		}

		.actions-container.active {
			pointer-events: none;
		}

		.graph-container {
			transform: rotateX(70deg);
		}

		&.faded {
			opacity: 0.3;
		}
	}

	.label-valence {
		display: inline-block;
		position: relative;
		top: 0.1em;
		// right: 0.1em;
		padding-right: 0.2em;

		font-family: 'Raleway', sans-serif;
		font-weight: 700;
		font-size: 150%;
		letter-spacing: -0.15em;

		&.plus,
		&.minus {
			font-size: 180%;
		}
		&.plus {
			top: 0.15em;
		}
	}
	.short-slash {
		display: inline-block;
		margin: 0 0.1em;
		font-size: 75%;
	}

	.actions-container {
		position: absolute;
		width: 100%;
		height: 100%;

		// align top of actions containers with bottom of
		// 'backgrounded' states graph, which is scaled and translated.
		// this math is basically:
		// (states position) - (scaled states offset) - scale * (states graph offset from parent + states graph bottom margin)
		top: calc((100% + #{$states-backgrounded-top}) -
			(100% * (1 - #{$states-backgrounded-scale}) / 2) -
			#{$states-backgrounded-scale} * (#{$states-containers-bottom} + 50px));
		left: 50%;

		pointer-events: none;
		opacity: 0.0;

		// align top of actions containers with bottom of
		// 'backgrounded' states graph, which is scaled and translated.
		// this math is basically:
		// 	(scaled states offset) +
		// 	states position -
		// 	scale * (states graph offset from parent + states graph bottom margin (50px, from states.js)) -
		// 	actions bottom margin (25px, from actions.js), scaled per rotateX(60deg) (30-60-90 triangle means 0.5x)
		.small-screen & {
			top: calc((100% * (1 - (1 - #{$states-backgrounded-actions-scale-small}) / 2)) +
				#{$states-backgrounded-actions-top-small} -
				#{$states-backgrounded-actions-scale-small} * (#{$ui-mobile-footer-height}px + #{$ui-mobile-caption-height} + 50px) -
				(25px / 2));
			// top: calc(83% - 17% - 0.66*(44px + 15rem + 50px) - (25px / 2))
		}

		&.transitioning {
			transition-property: transform, opacity;
			transition-duration: #{$emotions-panX-duration}s;
			transition-timing-function: ease-in-out, cubic-bezier(0.9, 0.0, 0.5, 1.0);
		}

		// NOTE: overridden in #actions.backgrounded above
		&.active {
			pointer-events: auto;
			opacity: 1.0;
		}
	}

	.graph-container,
	.label-container {
		position: absolute;
		top: 0;
		left: 0;
	}

	.graph-container {
		width: $actions-graph-width;
		height: 40%;
		margin-left: -$actions-graph-width*0.5;
		transform-origin: top;

		// NOTE: overridden by .backgrounded rule above
		transform: rotateX(60deg);
		transition: transform #{$states-backgrounded-duration-in}s cubic-bezier(.81,.34,.63,.85);

		// pointer-events: auto;

		.valence {
			stroke: rgba(77, 77, 77, 0.25);
			stroke-width: 1;
			cursor: pointer;

			&.constructive {
				fill: rgba(255, 255, 255, 0.25);
			}
			&.both {
				fill: rgba(255, 255, 255, 0.0);
			}
			&.destructive {
				fill: rgba(77, 77, 77, 0.1);
			}
			&.none {
				display: none;
			}

			&.highlighted {
				stroke: rgba(33, 33, 33, 0.25);
				stroke-width: 2;
			}

		}
	}

	.label-container {
		top: #{$actions-margins-top}px;

		.label {
			bottom: 0;
			transform-origin: bottom;
			@include emotion-color;

			// override [data-popuptarget] transitions
			// to ensure smooth circular transitions
			transition-property: transform, opacity;
			transition-duration: 0ms, #{$states-highlighted-out}s;
			transition-timing-function: linear, ease-in;

			opacity: 1.0;

			&.muted {
				transition-timing-function: linear, ease-out;
				opacity: 0.2;
			}
		}

		&.active h4 {
			pointer-events: auto;
		}

	}
}

.action-arrow {
	stroke: none;
	cursor: pointer;
	path {
		mix-blend-mode: multiply;
	}

	transition: opacity #{$states-highlighted-out}s ease-in;
	opacity: 1.0;
	&.constructive path.gradient-fill {
		opacity: 1.0;
	}
	&.both path.gradient-fill {
		opacity: 0.5;
	}
	&.destructive path.gradient-fill {
		opacity: 0.25;
	}
	&.muted {
		transition: opacity #{$states-highlighted-out}s ease-out;
		opacity: 0.2;
	}
}
