#states {
	position: absolute;
	width: 100%;
	height: 100%;
	overflow-x: hidden;
	overflow-y: hidden;

	min-height: 600px;
	.small-screen & {
		min-height: 0;
	}

	top: 0;
	left: 50%;
	margin-left: -50%;

	text-align: center;
	opacity: 1.0;

	transform: scale(1.0);
	transition-property: transform, top, opacity, font-size;
	transition-duration: #{$states-backgrounded-duration-in}s, #{$states-backgrounded-duration-in}s, 0.5s, .2s;
	transition-delay: 0s, 0s, 0s, #{$states-backgrounded-duration-in / 2}s;
	transition-timing-function: cubic-bezier(0.4, 0.4, 0.35, 1), cubic-bezier(.81,.34,.63,.85), ease, linear;

	&.backgrounded {
		transform: scale($states-backgrounded-scale);
		top: $states-backgrounded-top;

		// tie `transform` and `top` transitions when animating between any non-states sections,
		// to prevent the two transitions from drifting apart from each other,
		// but use a different transition for `transform` when animating between states and any other section.
		transition-timing-function: cubic-bezier(.81,.34,.63,.85), cubic-bezier(.81,.34,.63,.85), ease;
		&.states-in-out {
			transition-timing-function: cubic-bezier(0.4, 0.4, 0.35, 1), cubic-bezier(.81,.34,.63,.85), ease;
		}

		&.actions {
			// states appear a bit larger in actions
			transform: scale($states-backgrounded-actions-scale);
			top: $states-backgrounded-actions-top;
			font-size: calc(0.66667em / #{$states-backgrounded-scale});

			.small-screen & {
				transform: scale($states-backgrounded-actions-scale-small);
				top: $states-backgrounded-actions-top-small;
			}
		}

		/*
		// TODO: prevent visible edge to states transitions when backgrounded
		width: calc(100% / #{$states-backgrounded-scale});
		left: calc(50% / #{$states-backgrounded-scale});
		margin-left: calc(-50% / #{$states-backgrounded-scale});
		*/

		&.faded {
			opacity: 0.3;
		}
	}

	.graph-container,
	.label-container {
		position: absolute;
		bottom: $states-containers-bottom;
		left: 50%;
		margin-left: -$states-graph-width/2;
		min-height: 400px;

		opacity: 0.0;
		pointer-events: none;


		&.transitioning {
			transition-property: transform, opacity;
			transition-duration: #{$emotions-panX-duration}s;
			transition-timing-function: ease-in-out, cubic-bezier(0.9, 0.0, 0.5, 1.0);
		}

		&.active {
			pointer-events: auto;
			opacity: 1.0;
		}
	}

	.graph-container {
		width: $states-graph-width;
		height: 70%;

		.small-screen & {
			width: $states-graph-width-small;
			height: 50%;
			bottom: calc(#{$ui-mobile-footer-height}px + #{$ui-mobile-caption-height});	// align within parent container, to account for mobile UI
			margin-left: -$states-graph-width-small/2;
			min-height: 200px;
		}

		.axis {
			line,
			path {
				fill: none;
				stroke: $text-color;
				shape-rendering: crispEdges;
			}

			&.labels {
				line,
				path {
					display: none
				}
				text {
					@extend %raleway-light;
					font-size: 0.8em;
				}
			}

			opacity: 0.0;
			transition: opacity #{$ui-labels-duration-in}s cubic-bezier(0.645, 0.045, 0.355, 1);

			&.visible {
				opacity: 1.0;
			}
		}

		.area {
			mix-blend-mode: multiply;
			cursor: pointer;

			opacity: 1.0;
			transition: opacity #{$states-highlighted-out}s ease-out;
			&.unhighlighted {
				opacity: 0.2;
				transition: opacity #{$states-highlighted-in}s ease-in;
			}
		}
	}

	.label-container {
		top: 15%;
		pointer-events: none; // turn pointer events off for container

		.label {
			@include emotion-color;
			pointer-events: auto; // enable pointer events for label
			transform: translate(-50%, -50%);

			h3 {
				margin: 0;
				cursor: pointer;
				opacity: 1.0;
				white-space: nowrap;
			}

			&.unhighlighted {
				opacity: 0.2;
			}

			&.popped {
				h3 {
					cursor: inherit;
				}
			}
		}
	}

	&.backgrounded {
		.label-container {
			.label {
				pointer-events: none;
				border-color: rgba(255,255,255, 0);

			}

			.highlighted {
				opacity: 1;
			}
			.selected {
				opacity: 1;
			}
			.muted {
				// ug - hate having the !important here... but it's overriding another one that we need
				opacity: 0 !important;
			}

		}
	}

	.states-defs {
		pointer-events: none;
	}
}
